//
//  SearchResultsTableViewController.swift
//  Bicycles
//
//  Created by Andrew D Lee on 8/30/16.
//  Copyright Â© 2016 Andrew D Lee. All rights reserved.
//

import UIKit
import MapKit

// This class holds the search results generated by the UISearchController
// of the MapViewController.
// This class is largely based on https://www.thorntech.com/2016/01/how-to-search-for-location-using-apples-mapkit/

class SearchResultsTableViewController: UITableViewController {

    // MARK: - Properties
    
    var searchResults = [MKMapItem]()
    var mapView: MKMapView?
    var networkError = false
    
    weak var searchLocationDelegate: SearchLocationDelegate?
    weak var networkConnectionDelegate: NetworkConnectionDelegate?
    
    // MARK: - View Functions
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(animated: Bool) {
        networkError = false
    }
    
    override func viewDidAppear(animated: Bool) {
        addApplicationDidBecomeActiveNotificationObserver()
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    // MARK: - Table view data source

    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {
        return 1
    }

    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return searchResults.count
    }

    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCellWithIdentifier("ResultsCell", forIndexPath: indexPath)
        
        let result = searchResults[indexPath.row]
        cell.textLabel!.text = result.placemark.name
        cell.detailTextLabel!.text = parseAddress(result.placemark)

        return cell
    }
    
    override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        let placemark = searchResults[indexPath.row].placemark
        searchLocationDelegate?.searchLocation(placemark)
        self.dismissViewControllerAnimated(true, completion: nil)
    }
    
    // MARK: - Helper Functions
    
    // taken from https://www.thorntech.com/2016/01/how-to-search-for-location-using-apples-mapkit/
    /// Constructs a properly formatted address string.
    /// - Parameter selectedItem: MKPlacemark containing the address information.
    /// - Returns: String of the properly formatted address.
    func parseAddress(selectedItem:MKPlacemark) -> String {
        
        print("Parsing address")
        
        // put a space between "4" and "Melrose Place"
        let firstSpace = (selectedItem.subThoroughfare != nil &&
            selectedItem.thoroughfare != nil) ? " " : ""
        
        // put a comma between street and city/state
        let comma = (selectedItem.subThoroughfare != nil || selectedItem.thoroughfare != nil) &&
            (selectedItem.subAdministrativeArea != nil || selectedItem.administrativeArea != nil) ? ", " : ""
        
        // put a space between "Washington" and "DC"
        let secondSpace = (selectedItem.subAdministrativeArea != nil &&
            selectedItem.administrativeArea != nil) ? " " : ""
        
        let addressLine = String(
            format:"%@%@%@%@%@%@%@",
            // street number
            selectedItem.subThoroughfare ?? "",
            firstSpace,
            // street name
            selectedItem.thoroughfare ?? "",
            comma,
            // city
            selectedItem.locality ?? "",
            secondSpace,
            // state
            selectedItem.administrativeArea ?? ""
        )
        
        return addressLine
    }

}

extension SearchResultsTableViewController : UISearchResultsUpdating {
    func updateSearchResultsForSearchController(searchController: UISearchController) {
        if networkError == true {
            print("Network error occurred. Cancelling network request")
            return
        }
        
        guard let mapView = mapView, queryText = searchController.searchBar.text where queryText.isEmpty == false else {
            print("Search text empty. Cancelling network request.")
            return
        }
        
        let request = MKLocalSearchRequest()
        // set the query for the request
        request.naturalLanguageQuery = queryText
            
        // set region for the search request
        request.region = mapView.region
    
        UIApplication.sharedApplication().networkActivityIndicatorVisible = true
        MKLocalSearch(request: request).startWithCompletionHandler {
            (response, error) in
            UIApplication.sharedApplication().networkActivityIndicatorVisible = true
            
            guard error == nil else {
                UIApplication.sharedApplication().networkActivityIndicatorVisible = false
                
                print(error)
                
                let title = "Error!"
                let message = "A newtork error may have occurred. Please check your network connection and try again."
                let alert = UIAlertController(title: title, message: message, preferredStyle: .Alert)
                alert.addAction(UIAlertAction(title: "OK", style: .Default, handler: nil))
                
                self.networkError = true
                
                dispatch_async(dispatch_get_main_queue()) {
                    self.presentViewController(alert, animated: true, completion: nil)
                    self.networkConnectionDelegate?.disableSearchControls()
                }
                
                return
            }
            guard let response = response else {
                UIApplication.sharedApplication().networkActivityIndicatorVisible = false
                return
            }
            guard response.mapItems.count > 0 else {
                // inform the user that there are no results
                print("0 results found matching search string.")
                
                UIApplication.sharedApplication().networkActivityIndicatorVisible = false
                
                let title = "No results!"
                let message = "Your query did not return any results."
                let alert = UIAlertController(title: title, message: message, preferredStyle: .Alert)
                alert.addAction(UIAlertAction(title: "OK", style: .Default, handler: nil))
                
                dispatch_async(dispatch_get_main_queue()) {
                    self.presentViewController(alert, animated: true, completion: nil)
                }
                dispatch_async(dispatch_get_main_queue()) {
                    self.dismissViewControllerAnimated(true, completion: nil)
                }
                
                return
            }
            
            print("\(response.mapItems.count) potentially matching search results found.")
            
            self.searchResults = response.mapItems
            self.tableView.reloadData()
            UIApplication.sharedApplication().networkActivityIndicatorVisible = false
        }
    }
}
